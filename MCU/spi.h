/**
Contains function headers to communicate with IMU and FPGA
    @file spi.h
    @author Eric Chen, Tanvika Dasari
    @version 1.0 12/08/2022
*/
#ifndef SPI_H
#define SPI_H

#include <stdio.h>
#include <stm32l432xx.h>
#include "lib/STM32L432KC.h"
#include <stdbool.h>
#include <math.h>
#include <time.h>


////////////////////////////////////////////////
// Constants
////////////////////////////////////////////////
#define MCK_FREQ 100000

////////////////////////////////////////////////
// Constants for IMU
////////////////////////////////////////////////
#define WHO_AM_I 0b00001111
#define OUTX_L_G 0b00100010
#define OUTX_H_G 0b00100011
#define OUTY_L_G 0b00100100
#define OUTY_H_G 0b00100101
#define OUTZ_L_G 0b00100110
#define OUTZ_H_G 0b00100111
#define OUTX_L_A 0b00101000
#define OUTX_H_A 0b00101001
#define OUTY_L_A 0b00101010
#define OUTY_H_A 0b00101011
#define OUTZ_L_A 0b00101100
#define OUTZ_H_A 0b00101101
#define FIFO_CTRL3 0b00001001
#define CTRL1_XL 0b00010000
#define CTRL2_G 0b00010001
#define CTRL7_G 00010110



////////////////////////////////////////////////
// Pin Names
////////////////////////////////////////////////
#define FPGA_LOAD_PIN PA5
#define FPGA_RESET_PIN PA6

#define IMU_LOAD_PIN PB6
#define IMU_READ_ADDRESS 0b10000000

#define DEBUG_LED_PIN_1 PA9
#define DEBUG_LED_PIN_2 PA10
#define DEBUG_LED_PIN_3 PA11    


////////////////////////////////////////////////
// IMU Values
////////////////////////////////////////////////

#define ACCEL_SCALE_2G 0.061
#define ACCEL_SCALE_4G 0.122
#define GYRO_SCALE_125 4.375
#define GYRO_SCALE_250 8.75

/**
* Initializes the pins, clock, timer and IMU
*/
void init();

/**
* Caps the control at the 2 limits, -100 and 100
* @param control-effort is the un-capped effort
* @return returns capped control-effort
*/
float control_cap(float control_effort);

/**
* Sends 2 bytes of motor values to FPGA through SPI
* @param m1_val Character containing both direction and magnitude of motor 1 control effort
* @param m2_val Character containing both direction and magnitude of motor 2 control effort
*/
void spin_motor(char m1_val, char m2_val);

/**
* Converts a binary number into an integer
* @param n binary number
* @return Integer base 10 with value of the binary number
*/
int binaryToDecimal(int n);


/**
* Converts a decimal number to binary number
* @param n Base 10 number
* @return Base 2 number
*/
int decimalToBinary(int n);


/**
* generates FPGA message the FPGA configuration, where first bit is the sign and the rest
* is a value between 0 to 100
* @param control_effort control effort generated by the controller, from -100 to 100
* @return a character that is sent to FPGA
* @note not two's complement
*/
char generate_FPGA_message(int control_effort);

/**
* creates an 8-bit encoding with the most significant bit representing spin direction
* and the rest being a value from 0 to 100
* @param reverse indicates whether to spin the wheel forward or reverse
* @param value inidicates an integer from 0 to 100
* @return the encoded character
*/
char generate_FPGA_message_helper(bool reverse, int value);


/**
* Forcefully resets the FPGA
*/
void force_reset();


/**
* Reads IMU at given address
* @param address IMU address
* @return IMU value at address
*/
char read_imu(char address);

/**
* Writes to the IMU at given address with given character
* @param address IMU address to write to
* @param write IMU value to place at the address
*/
void write_imu(char address, char write);

/**
* Converts 2 characters into 16-bit integer
* @param higher Top 8 bits of the integer
* @param lower Bottom 8 bits of integer
* @return 16 bit integer
*/
int16_t twosComplement_to_int(char higher, char lower);


/**
* Scales acceleration according IMU configuration
* @param raw_acceleration Acceleration before being scaled
* @return Scaled acceleration
*/
float scale_accel(int16_t raw_acceleration);

/**
* Scales angle according IMU configuration
* @param raw_angle Angle before being scaled
* @return Scaled angle
*/
float get_angle(int16_t raw_angle);

/**
* Continously reads the IMU to get most updated values
* @param i Counter for the amount of times waiting is called 
* @param values A struct that continously holds the most updated IMU values
*/
void waiting(int i, struct imu_values* values);

/**
* Updates the PID controller based on IMU values and sends control effort to FPGA
* @param values A struct that continously holds the most updated IMU values 
* @param c A controller with the total error, PID tuning values
*/
void after_waiting(struct imu_values * values, struct controller* c);


/**
* Prints float with 3 significant figures
* @param f float to be printed
*/
void print_float(float f);


/**
* main
*/
int main();


#endif