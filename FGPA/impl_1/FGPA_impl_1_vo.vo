
// Verilog netlist produced by program backanno, Version Radiant Software (64-bit) 3.2.0.18.0

// backanno -o FGPA_impl_1_vo.vo -sp High-Performance_1.2V -w -neg -gui FGPA_impl_1.udb 
// Netlist created on Sat Nov 12 01:02:24 2022
// Netlist written on Sat Nov 12 01:02:32 2022
// Design is for device iCE40UP5K
// Design is for package SG48
// Design is for performance grade High-Performance_1.2V

`timescale 1 ns / 1 ps

module top_wrapper ( a1, enable34, enable12, a2, a3, a4, reset );
  input  reset;
  output a1, enable34, enable12, a2, a3, a4;
  wire   \dut.n29[5] , \dut.n372 , \dut.n110 , \dut.counter[5] , \dut.n55 , 
         \dut.int_osc , \dut.n29[4] , \dut.n29[3] , \dut.n369 , 
         \dut.counter[4] , \dut.n108 , \dut.counter[3] , \dut.n29[2] , 
         \dut.n29[1] , \dut.n351 , \dut.counter[2] , \dut.n106 , 
         \dut.counter[1] , \dut.n29[0] , \dut.n348 , \dut.counter[0] , VCC_net, 
         \dut.dut.n37[7] , \dut.dut.n366 , \dut.dut.n103 , 
         \dut.dut.counter[7] , \dut.dut.n56 , \dut.clk , \dut.dut.n37[6] , 
         \dut.dut.n37[5] , \dut.dut.n363 , \dut.dut.counter[6] , 
         \dut.dut.n101 , \dut.dut.counter[5] , \dut.dut.n37[4] , 
         \dut.dut.n37[3] , \dut.dut.n360 , \dut.dut.counter[4] , \dut.dut.n99 , 
         \dut.dut.counter[3] , \dut.dut.n37[2] , \dut.dut.n37[1] , 
         \dut.dut.n357 , \dut.dut.counter[2] , \dut.dut.n97 , 
         \dut.dut.counter[1] , \dut.dut.n37[0] , \dut.dut.n354 , \dut.dut.n8 , 
         \dut.n34 , \dut.n4 , \dut.dut.n177 , \dut.dut.n179 , reset_c, 
         \dut.dut.n168 , \dut.dut.n176 , \dut.dut.n180 , enable12_c, GND_net, 
         a3_c;

  dut_SLICE_0 \dut.SLICE_0 ( .DI0(\dut.n29[5] ), .D1(\dut.n372 ), 
    .D0(\dut.n110 ), .C0(\dut.counter[5] ), .LSR(\dut.n55 ), 
    .CLK(\dut.int_osc ), .CIN0(\dut.n110 ), .CIN1(\dut.n372 ), 
    .Q0(\dut.counter[5] ), .F0(\dut.n29[5] ), .COUT0(\dut.n372 ));
  dut_SLICE_1 \dut.SLICE_1 ( .DI1(\dut.n29[4] ), .DI0(\dut.n29[3] ), 
    .D1(\dut.n369 ), .C1(\dut.counter[4] ), .D0(\dut.n108 ), 
    .C0(\dut.counter[3] ), .LSR(\dut.n55 ), .CLK(\dut.int_osc ), 
    .CIN0(\dut.n108 ), .CIN1(\dut.n369 ), .Q0(\dut.counter[3] ), 
    .Q1(\dut.counter[4] ), .F0(\dut.n29[3] ), .F1(\dut.n29[4] ), 
    .COUT1(\dut.n110 ), .COUT0(\dut.n369 ));
  dut_SLICE_2 \dut.SLICE_2 ( .DI1(\dut.n29[2] ), .DI0(\dut.n29[1] ), 
    .D1(\dut.n351 ), .C1(\dut.counter[2] ), .D0(\dut.n106 ), 
    .C0(\dut.counter[1] ), .LSR(\dut.n55 ), .CLK(\dut.int_osc ), 
    .CIN0(\dut.n106 ), .CIN1(\dut.n351 ), .Q0(\dut.counter[1] ), 
    .Q1(\dut.counter[2] ), .F0(\dut.n29[1] ), .F1(\dut.n29[2] ), 
    .COUT1(\dut.n108 ), .COUT0(\dut.n351 ));
  dut_SLICE_3 \dut.SLICE_3 ( .DI1(\dut.n29[0] ), .D1(\dut.n348 ), 
    .C1(\dut.counter[0] ), .B1(VCC_net), .LSR(\dut.n55 ), .CLK(\dut.int_osc ), 
    .CIN1(\dut.n348 ), .Q1(\dut.counter[0] ), .F1(\dut.n29[0] ), 
    .COUT1(\dut.n106 ), .COUT0(\dut.n348 ));
  dut_dut_SLICE_4 \dut.dut.SLICE_4 ( .DI0(\dut.dut.n37[7] ), 
    .D1(\dut.dut.n366 ), .D0(\dut.dut.n103 ), .C0(\dut.dut.counter[7] ), 
    .LSR(\dut.dut.n56 ), .CLK(\dut.clk ), .CIN0(\dut.dut.n103 ), 
    .CIN1(\dut.dut.n366 ), .Q0(\dut.dut.counter[7] ), .F0(\dut.dut.n37[7] ), 
    .COUT0(\dut.dut.n366 ));
  dut_dut_SLICE_5 \dut.dut.SLICE_5 ( .DI1(\dut.dut.n37[6] ), 
    .DI0(\dut.dut.n37[5] ), .D1(\dut.dut.n363 ), .C1(\dut.dut.counter[6] ), 
    .D0(\dut.dut.n101 ), .C0(\dut.dut.counter[5] ), .LSR(\dut.dut.n56 ), 
    .CLK(\dut.clk ), .CIN0(\dut.dut.n101 ), .CIN1(\dut.dut.n363 ), 
    .Q0(\dut.dut.counter[5] ), .Q1(\dut.dut.counter[6] ), 
    .F0(\dut.dut.n37[5] ), .F1(\dut.dut.n37[6] ), .COUT1(\dut.dut.n103 ), 
    .COUT0(\dut.dut.n363 ));
  dut_dut_SLICE_6 \dut.dut.SLICE_6 ( .DI1(\dut.dut.n37[4] ), 
    .DI0(\dut.dut.n37[3] ), .D1(\dut.dut.n360 ), .C1(\dut.dut.counter[4] ), 
    .D0(\dut.dut.n99 ), .C0(\dut.dut.counter[3] ), .LSR(\dut.dut.n56 ), 
    .CLK(\dut.clk ), .CIN0(\dut.dut.n99 ), .CIN1(\dut.dut.n360 ), 
    .Q0(\dut.dut.counter[3] ), .Q1(\dut.dut.counter[4] ), 
    .F0(\dut.dut.n37[3] ), .F1(\dut.dut.n37[4] ), .COUT1(\dut.dut.n101 ), 
    .COUT0(\dut.dut.n360 ));
  dut_dut_SLICE_7 \dut.dut.SLICE_7 ( .DI1(\dut.dut.n37[2] ), 
    .DI0(\dut.dut.n37[1] ), .D1(\dut.dut.n357 ), .C1(\dut.dut.counter[2] ), 
    .D0(\dut.dut.n97 ), .C0(\dut.dut.counter[1] ), .LSR(\dut.dut.n56 ), 
    .CLK(\dut.clk ), .CIN0(\dut.dut.n97 ), .CIN1(\dut.dut.n357 ), 
    .Q0(\dut.dut.counter[1] ), .Q1(\dut.dut.counter[2] ), 
    .F0(\dut.dut.n37[1] ), .F1(\dut.dut.n37[2] ), .COUT1(\dut.dut.n99 ), 
    .COUT0(\dut.dut.n357 ));
  dut_dut_SLICE_8 \dut.dut.SLICE_8 ( .DI1(\dut.dut.n37[0] ), 
    .D1(\dut.dut.n354 ), .C1(\dut.dut.n8 ), .B1(VCC_net), .LSR(\dut.dut.n56 ), 
    .CLK(\dut.clk ), .CIN1(\dut.dut.n354 ), .Q1(\dut.dut.n8 ), 
    .F1(\dut.dut.n37[0] ), .COUT1(\dut.dut.n97 ), .COUT0(\dut.dut.n354 ));
  dut_SLICE_9 \dut.SLICE_9 ( .DI0(\dut.n34 ), .D0(\dut.n55 ), .C0(\dut.clk ), 
    .CLK(\dut.int_osc ), .Q0(\dut.clk ), .F0(\dut.n34 ));
  dut_SLICE_11 \dut.SLICE_11 ( .D1(\dut.counter[4] ), .C1(\dut.n4 ), 
    .B1(\dut.counter[3] ), .A1(\dut.counter[5] ), .D0(\dut.counter[1] ), 
    .C0(\dut.counter[2] ), .B0(\dut.counter[0] ), .F0(\dut.n4 ), 
    .F1(\dut.n55 ));
  dut_dut_SLICE_13 \dut.dut.SLICE_13 ( .D1(\dut.dut.n177 ), 
    .C1(\dut.dut.n179 ), .B1(\dut.dut.counter[5] ), .A1(\dut.dut.counter[6] ), 
    .D0(\dut.dut.counter[7] ), .C0(reset_c), .F0(\dut.dut.n179 ), 
    .F1(\dut.dut.n56 ));
  dut_dut_SLICE_15 \dut.dut.SLICE_15 ( .DI1(\dut.dut.n168 ), 
    .D1(\dut.dut.counter[1] ), .C1(\dut.dut.n176 ), .B1(\dut.dut.counter[5] ), 
    .A1(\dut.dut.counter[4] ), .D0(\dut.dut.counter[2] ), 
    .C0(\dut.dut.counter[3] ), .LSR(\dut.dut.n180 ), .CLK(\dut.clk ), 
    .Q1(enable12_c), .F0(\dut.dut.n176 ), .F1(\dut.dut.n168 ));
  dut_dut_SLICE_16 \dut.dut.SLICE_16 ( .D0(\dut.dut.counter[2] ), 
    .C0(\dut.dut.counter[3] ), .B0(\dut.dut.counter[4] ), .F0(\dut.dut.n177 ));
  SLICE_17 SLICE_17( .F0(VCC_net));
  SLICE_18 SLICE_18( .F0(GND_net));
  dut_dut_SLICE_19 \dut.dut.SLICE_19 ( .D0(\dut.dut.counter[6] ), .C0(reset_c), 
    .B0(\dut.dut.counter[7] ), .F0(\dut.dut.n180 ));
  dut_hf_osc \dut.hf_osc ( .CLKHFPU(VCC_net), .CLKHFEN(VCC_net), 
    .CLKHF(\dut.int_osc ));
  dut_dut_a3 \dut.dut.a3 ( .DO0(reset_c), .OUTCLK(\dut.clk ), .PADDO(a3_c));
  a1 a1_I( .PADDO(VCC_net), .a1(a1));
  enable34 enable34_I( .PADDO(GND_net), .enable34(enable34));
  enable12 enable12_I( .PADDO(enable12_c), .enable12(enable12));
  a2 a2_I( .PADDO(GND_net), .a2(a2));
  a3 a3_I( .PADDO(a3_c), .a3(a3));
  a4 a4_I( .PADDO(GND_net), .a4(a4));
  reset reset_I( .PADDI(reset_c), .reset(reset));
endmodule

module dut_SLICE_0 ( input DI0, D1, D0, C0, LSR, CLK, CIN0, CIN1, output Q0, 
    F0, COUT0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  fa2 \dut/counter_17_add_4_7 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/counter_17__i5 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module fa2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI0, CI1, output S0, S1, 
    CO0, CO1 );

  FA2 inst1( .A0(A0), .B0(B0), .C0(C0), .D0(D0), .CI0(CI0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .CI1(CI1), .CO0(CO0), .CO1(CO1), .S0(S0), .S1(S1));
  defparam inst1.INIT0 = "0xc33c";
  defparam inst1.INIT1 = "0xc33c";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ffsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module dut_SLICE_1 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \dut/counter_17_add_4_5 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/counter_17__i3 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \dut/counter_17__i4 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_SLICE_2 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \dut/counter_17_add_4_3 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/counter_17__i1 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \dut/counter_17__i2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_SLICE_3 ( input DI1, D1, C1, B1, LSR, CLK, CIN1, output Q1, F1, 
    COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  fa2 \dut/counter_17_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \dut/counter_17__i0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_dut_SLICE_4 ( input DI0, D1, D0, C0, LSR, CLK, CIN0, CIN1, output 
    Q0, F0, COUT0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  fa2 \dut/dut/counter_19_add_4_9 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/dut/counter_19__i8 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_dut_SLICE_5 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \dut/dut/counter_19_add_4_7 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/dut/counter_19__i6 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \dut/dut/counter_19__i7 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_dut_SLICE_6 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \dut/dut/counter_19_add_4_5 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/dut/counter_19__i4 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \dut/dut/counter_19__i5 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_dut_SLICE_7 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \dut/dut/counter_19_add_4_3 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/dut/counter_19__i2 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \dut/dut/counter_19__i3 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_dut_SLICE_8 ( input DI1, D1, C1, B1, LSR, CLK, CIN1, output Q1, F1, 
    COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  fa2 \dut/dut/counter_19_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(VCCI), 
    .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), .S0(), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \dut/dut/counter_19__i1 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module dut_SLICE_9 ( input DI0, D0, C0, CLK, output Q0, F0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut4 \dut/i1_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/clk_c ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  LUT4 #("0x0FF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dut_SLICE_11 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40001 \dut/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40002 \dut/i1_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40001 ( input A, B, C, D, output Z );

  LUT4 #("0xA800") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40002 ( input A, B, C, D, output Z );

  LUT4 #("0xFCF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dut_dut_SLICE_13 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40003 \dut/dut/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40004 \dut/dut/i1_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40003 ( input A, B, C, D, output Z );

  LUT4 #("0xF8F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dut_dut_SLICE_15 ( input DI1, D1, C1, B1, A1, D0, C0, LSR, CLK, output 
    Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40005 \dut/dut/i204_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40004 \dut/dut/i1_2_lut_adj_10 ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \dut/dut/enable12 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  LUT4 #("0x777F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dut_dut_SLICE_16 ( input D0, C0, B0, output F0 );
  wire   GNDI;

  lut40006 \dut/dut/i1_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_17 ( output F0 );
  wire   GNDI;

  lut40007 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40007 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_18 ( output F0 );
  wire   GNDI;

  lut40008 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  LUT4 #("0x0000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dut_dut_SLICE_19 ( input D0, C0, B0, output F0 );
  wire   GNDI;

  lut40009 \dut/dut/i1_2_lut_3_lut_adj_11 ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40009 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module dut_hf_osc ( input CLKHFPU, CLKHFEN, output CLKHF );
  wire   GNDI;

  HSOSC_CORE_B \dut/hf_osc ( .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), 
    .TRIM9(GNDI), .TRIM8(GNDI), .TRIM7(GNDI), .TRIM6(GNDI), .TRIM5(GNDI), 
    .TRIM4(GNDI), .TRIM3(GNDI), .TRIM2(GNDI), .TRIM1(GNDI), .TRIM0(GNDI), 
    .CLKHF(CLKHF));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module HSOSC_CORE_B ( input CLKHFPU, CLKHFEN, TRIM9, TRIM8, TRIM7, TRIM6, 
    TRIM5, TRIM4, TRIM3, TRIM2, TRIM1, TRIM0, output CLKHF );

  HSOSC_CORE INST10( .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), .TRIM9(TRIM9), 
    .TRIM8(TRIM8), .TRIM7(TRIM7), .TRIM6(TRIM6), .TRIM5(TRIM5), .TRIM4(TRIM4), 
    .TRIM3(TRIM3), .TRIM2(TRIM2), .TRIM1(TRIM1), .TRIM0(TRIM0), .CLKHF(CLKHF));
  defparam INST10.CLKHF_DIV = "0b11";
  defparam INST10.FABRIC_TRIME = "DISABLE";
endmodule

module dut_dut_a3 ( input DO0, OUTCLK, output PADDO );
  wire   GNDI, VCCI, DO0_dly, OUTCLK_dly;

  IOL_B_B \dut/dut/a3 ( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), .CE(VCCI), 
    .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
  endspecify

endmodule

module IOL_B_B ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "LATCH_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module a1 ( input PADDO, output a1 );
  wire   VCCI;

  BB_B_B \a1_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(a1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => a1) = (0:0:0,0:0:0);
  endspecify

endmodule

module BB_B_B ( input T_N, I, output O, inout B );

  BB_B INST10( .T_N(T_N), .I(I), .O(O), .B(B));
endmodule

module enable34 ( input PADDO, output enable34 );
  wire   VCCI;

  BB_B_B \enable34_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(enable34));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => enable34) = (0:0:0,0:0:0);
  endspecify

endmodule

module enable12 ( input PADDO, output enable12 );
  wire   VCCI;

  BB_B_B \enable12_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(enable12));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => enable12) = (0:0:0,0:0:0);
  endspecify

endmodule

module a2 ( input PADDO, output a2 );
  wire   VCCI;

  BB_B_B \a2_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(a2));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => a2) = (0:0:0,0:0:0);
  endspecify

endmodule

module a3 ( input PADDO, output a3 );
  wire   VCCI;

  BB_B_B \a3_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(a3));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => a3) = (0:0:0,0:0:0);
  endspecify

endmodule

module a4 ( input PADDO, output a4 );
  wire   VCCI;

  BB_B_B \a4_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(a4));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => a4) = (0:0:0,0:0:0);
  endspecify

endmodule

module reset ( output PADDI, input reset );
  wire   GNDI;

  BB_B_B \reset_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (reset => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule
